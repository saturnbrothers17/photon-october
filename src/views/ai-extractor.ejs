<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= locals.title || 'AI Question Extractor - Faculty Dashboard' %></title>
    <meta name="description" content="<%= locals.description || 'Extract questions and options from images using powerful AI' %>">
    
    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="/images/favicon.ico">
    
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    
    <!-- MathJax for LaTeX rendering -->
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    <script>
        window.MathJax = {
            tex: {
                inlineMath: [['$', '$'], ['\\(', '\\)']],
                displayMath: [['$$', '$$'], ['\\[', '\\]']]
            }
        };
    </script>
    
    <style>
        body {
            font-family: 'Poppins', sans-serif;
        }
        /* Upload Area */
        .upload-area {
            border: 2px dashed #cbd5e1;
            border-radius: 16px;
            transition: all 0.3s ease;
            background-color: #f8fafc;
        }
        
        .upload-area:hover, .upload-area.dragover {
            border-color: #3b82f6;
            background-color: #eff6ff;
        }
        
        /* Result Card */
        .result-card {
            transition: all 0.3s ease;
            border-radius: 16px;
            overflow: hidden;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.08);
        }
        
        .result-card:hover {
            box-shadow: 0 10px 25px rgba(30, 64, 175, 0.15);
        }
        
        /* Custom Buttons */
        .btn-primary {
            background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%);
            transition: all 0.3s ease;
            font-weight: 600;
            letter-spacing: 0.5px;
            border-radius: 12px;
            box-shadow: 0 4px 15px rgba(30, 64, 175, 0.3);
        }
        
        .btn-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(30, 64, 175, 0.4);
        }
        
        .btn-secondary {
            background: #f1f5f9;
            color: #1e293b;
            transition: all 0.3s ease;
            font-weight: 600;
            letter-spacing: 0.5px;
            border-radius: 12px;
        }
        
        .btn-secondary:hover {
            background: #e2e8f0;
            transform: translateY(-2px);
        }
        
        /* Option Styles */
        .option-item {
            display: flex;
            align-items: center;
            padding: 12px 16px;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            margin-bottom: 12px;
            transition: all 0.3s ease;
        }
        
        .option-item.correct {
            border-color: #10b981;
            background-color: #ecfdf5;
        }
        
        .option-letter {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background-color: #e2e8f0;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            margin-right: 12px;
        }
        
        .option-item.correct .option-letter {
            background-color: #10b981;
            color: white;
        }
        
        /* Animated Elements */
        .animate-on-scroll {
            opacity: 0;
            transform: translateY(30px);
            transition: opacity 0.6s ease-out, transform 0.6s ease-out;
        }
        
        .animate-on-scroll.animate-fade-in {
            opacity: 1;
            transform: translateY(0);
        }
        
        /* Loading Spinner */
        .spinner {
            width: 24px;
            height: 24px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 1s ease-in-out infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        /* Preview Image */
        .image-preview {
            max-width: 100%;
            max-height: 300px;
            border-radius: 12px;
            object-fit: contain;
        }
    </style>
</head>
<body class="bg-gray-50">
    <!-- Header -->
    <header class="bg-white shadow-sm">
        <div class="container mx-auto px-4">
            <nav class="navbar flex items-center justify-between py-4">
                <a class="navbar-brand flex items-center" href="/">
                    <img src="/images/logo.svg" alt="Photon Coaching Logo" class="h-12">
                </a>
                <div class="hidden md:flex space-x-6">
                    <a class="nav-link hover:text-blue-600" href="/">Home</a>
                    <a class="nav-link hover:text-blue-600" href="/courses">Courses</a>
                    <a class="nav-link hover:text-blue-600" href="/student-corner">Student Corner</a>
                    <a class="nav-link hover:text-blue-600" href="/teacher-dashboard">Faculty Dashboard</a>
                    <a class="nav-link hover:text-blue-600" href="/contact">Contact</a>
                </div>
                <button class="md:hidden text-gray-500">
                    <i class="fas fa-bars text-2xl"></i>
                </button>
            </nav>
        </div>
    </header>

    <!-- Main Content -->
    <main>
        <div class="container mx-auto px-4 py-12">
            <div class="text-center mb-12 animate-on-scroll">
                <h1 class="text-3xl md:text-4xl font-bold mb-4">AI Question Extractor</h1>
                <p class="text-xl text-gray-600">Upload images containing questions and let our AI extract them for you</p>
            </div>
            
            <div class="max-w-4xl mx-auto">
                <!-- Upload Section -->
                <div class="bg-white rounded-xl shadow-md p-8 mb-8 animate-on-scroll">
                    <h2 class="text-2xl font-bold mb-6 text-gray-900">Upload Question Image</h2>
                    
                    <form id="uploadForm" enctype="multipart/form-data">
                        <div class="upload-area p-8 text-center mb-6" id="dropZone">
                            <i class="fas fa-cloud-upload-alt text-4xl text-blue-500 mb-4"></i>
                            <h3 class="text-xl font-semibold mb-2">Drag & Drop your image here</h3>
                            <p class="text-gray-600 mb-4">or</p>
                            <input type="file" id="questionImage" name="questionImage" accept="image/*" class="hidden">
                            <button type="button" id="browseButton" class="btn-primary py-2 px-6 rounded-lg font-bold">
                                Browse Files
                            </button>
                            <p class="text-gray-500 text-sm mt-4">Supports JPG, PNG, GIF (Max 5MB)</p>
                        </div>
                        
                        <div id="previewContainer" class="mb-6 hidden">
                            <h3 class="text-lg font-semibold mb-2">Image Preview</h3>
                            <img id="imagePreview" class="image-preview mx-auto" alt="Preview">
                        </div>
                        
                        <div class="text-center">
                            <button type="submit" id="extractButton" class="btn-primary py-3 px-8 rounded-lg text-lg font-bold inline-flex items-center">
                                <i class="fas fa-magic mr-3"></i> Extract Questions
                            </button>
                        </div>
                    </form>
                </div>
                
                <!-- Results Section -->
                <div id="resultsSection" class="hidden">
                    <div class="bg-white rounded-xl shadow-md p-8 mb-8 animate-on-scroll">
                        <div class="flex justify-between items-center mb-6">
                            <h2 class="text-2xl font-bold text-gray-900">Extracted Questions</h2>
                            <button id="addToTestButton" class="btn-primary py-2 px-4 rounded-lg font-bold">
                                <i class="fas fa-plus mr-2"></i> Add to Test
                            </button>
                        </div>
                        
                        <div id="questionsContainer">
                            <!-- Questions will be dynamically inserted here -->
                        </div>
                    </div>
                </div>
                
                <!-- Loading Indicator -->
                <div id="loadingIndicator" class="hidden text-center py-12">
                    <div class="spinner mx-auto mb-4"></div>
                    <p class="text-xl text-gray-700">Extracting questions using AI...</p>
                    <p class="text-gray-500">This may take a few moments</p>
                </div>
                
                <!-- Error Message -->
                <div id="errorMessage" class="hidden bg-red-50 border border-red-200 rounded-xl p-6 text-center">
                    <i class="fas fa-exclamation-circle text-red-500 text-3xl mb-3"></i>
                    <h3 class="text-xl font-bold text-red-800 mb-2">Error</h3>
                    <p id="errorText" class="text-red-600"></p>
                    <button id="retryButton" class="btn-primary mt-4 py-2 px-6 rounded-lg font-bold">
                        Try Again
                    </button>
                </div>
            </div>
        </div>
    </main>

    <!-- Footer -->
    <footer class="bg-gray-800 text-white py-8">
        <div class="container mx-auto px-4">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
                <div>
                    <h3 class="text-xl font-bold mb-4">Photon Coaching</h3>
                    <p>Best IIT JEE & NEET Coaching Institute in Varanasi</p>
                </div>
                <div>
                    <h3 class="text-xl font-bold mb-4">Quick Links</h3>
                    <ul class="space-y-2">
                        <li><a href="/" class="hover:text-blue-300">Home</a></li>
                        <li><a href="/courses" class="hover:text-blue-300">Courses</a></li>
                        <li><a href="/student-corner" class="hover:text-blue-300">Student Corner</a></li>
                        <li><a href="/teacher-dashboard" class="hover:text-blue-300">Faculty Dashboard</a></li>
                        <li><a href="/contact" class="hover:text-blue-300">Contact</a></li>
                    </ul>
                </div>
                <div>
                    <h3 class="text-xl font-bold mb-4">Contact Us</h3>
                    <p><i class="fas fa-phone mr-2"></i> +91 9450545318</p>
                    <p><i class="fas fa-envelope mr-2"></i> info@photoncoaching.in</p>
                    <p><i class="fas fa-map-marker-alt mr-2"></i> Varanasi, Uttar Pradesh</p>
                </div>
            </div>
            <div class="border-t border-gray-700 mt-8 pt-6 text-center">
                <p>&copy; 2025 Photon Coaching. All rights reserved.</p>
            </div>
        </div>
    </footer>

    <!-- JavaScript -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Scroll animation observer
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('animate-fade-in');
                    }
                });
            }, {
                threshold: 0.1,
                rootMargin: '0px 0px -50px 0px'
            });
            
            document.querySelectorAll('.animate-on-scroll').forEach(el => {
                observer.observe(el);
            });
            
            // DOM Elements
            const dropZone = document.getElementById('dropZone');
            const browseButton = document.getElementById('browseButton');
            const fileInput = document.getElementById('questionImage');
            const uploadForm = document.getElementById('uploadForm');
            const previewContainer = document.getElementById('previewContainer');
            const imagePreview = document.getElementById('imagePreview');
            const extractButton = document.getElementById('extractButton');
            const resultsSection = document.getElementById('resultsSection');
            const questionsContainer = document.getElementById('questionsContainer');
            const loadingIndicator = document.getElementById('loadingIndicator');
            const errorMessage = document.getElementById('errorMessage');
            const errorText = document.getElementById('errorText');
            const retryButton = document.getElementById('retryButton');
            const addToTestButton = document.getElementById('addToTestButton');
            
            // Event Listeners
            browseButton.addEventListener('click', () => {
                fileInput.click();
            });
            
            fileInput.addEventListener('change', handleFileSelect);
            dropZone.addEventListener('dragover', handleDragOver);
            dropZone.addEventListener('dragleave', handleDragLeave);
            dropZone.addEventListener('drop', handleDrop);
            uploadForm.addEventListener('submit', handleFormSubmit);
            retryButton.addEventListener('click', hideError);
            addToTestButton.addEventListener('click', addToTest);
            
            // Functions
            function handleFileSelect(e) {
                const file = e.target.files[0];
                if (file) {
                    previewImage(file);
                }
            }
            
            function handleDragOver(e) {
                e.preventDefault();
                dropZone.classList.add('dragover');
            }
            
            function handleDragLeave(e) {
                e.preventDefault();
                dropZone.classList.remove('dragover');
            }
            
            function handleDrop(e) {
                e.preventDefault();
                dropZone.classList.remove('dragover');
                
                const file = e.dataTransfer.files[0];
                if (file && file.type.startsWith('image/')) {
                    fileInput.files = e.dataTransfer.files;
                    previewImage(file);
                } else {
                    showError('Please drop an image file.');
                }
            }
            
            function previewImage(file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    imagePreview.src = e.target.result;
                    previewContainer.classList.remove('hidden');
                };
                reader.readAsDataURL(file);
            }
            
            function handleFormSubmit(e) {
                e.preventDefault();
                
                const file = fileInput.files[0];
                if (!file) {
                    showError('Please select an image file.');
                    return;
                }
                
                // Show loading indicator
                loadingIndicator.classList.remove('hidden');
                resultsSection.classList.add('hidden');
                errorMessage.classList.add('hidden');
                extractButton.disabled = true;
                extractButton.innerHTML = '<div class="spinner mr-3"></div> Extracting...';
                
                // Create FormData object
                const formData = new FormData();
                formData.append('questionImage', file);
                
                // Send request to server
                fetch('/ai-extractor/upload', {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => { throw new Error(err.error || 'Server error'); });
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        if (data.questions && data.questions.length > 0) {
                            displayResults(data.questions);
                        } else {
                            showError('No questions were detected in the image. Please try another image with clearer questions.');
                        }
                    } else {
                        showError(data.error || 'An error occurred during extraction.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showError('An error occurred during extraction: ' + error.message);
                })
                .finally(() => {
                    // Hide loading indicator
                    loadingIndicator.classList.add('hidden');
                    extractButton.disabled = false;
                    extractButton.innerHTML = '<i class="fas fa-magic mr-3"></i> Extract Questions';
                });
            }
            
            function displayResults(questions) {
                // Clear previous results
                questionsContainer.innerHTML = '';
                
                // Add each question to the container
                questions.forEach((question, index) => {
                    const questionElement = createQuestionElement(question, index);
                    questionsContainer.appendChild(questionElement);
                });
                
                // Show results section
                resultsSection.classList.remove('hidden');
                
                // Scroll to results
                resultsSection.scrollIntoView({ behavior: 'smooth' });
            }
            
            function createQuestionElement(question, index) {
                const questionDiv = document.createElement('div');
                questionDiv.className = 'result-card bg-gray-50 p-6 mb-6';
                
                // Question text
                const questionText = document.createElement('div');
                questionText.className = 'mb-4';
                questionText.innerHTML = `
                    <div class="flex justify-between items-center mb-3">
                        <h3 class="text-lg font-bold text-gray-900">Question ${index + 1}</h3>
                        <select class="difficulty-select bg-white border border-gray-300 rounded-lg px-3 py-1 text-sm">
                            <option value="easy" ${question.difficulty === 'easy' ? 'selected' : ''}>Easy</option>
                            <option value="medium" ${question.difficulty === 'medium' ? 'selected' : ''}>Medium</option>
                            <option value="hard" ${question.difficulty === 'hard' ? 'selected' : ''}>Hard</option>
                        </select>
                    </div>
                    <p class="text-gray-800 mb-4">${question.text}</p>
                `;
                
                // Options
                const optionsDiv = document.createElement('div');
                optionsDiv.className = 'mb-4';
                optionsDiv.innerHTML = '<h4 class="font-semibold text-gray-700 mb-2">Options</h4>';
                
                question.options.forEach((option, optionIndex) => {
                    const optionDiv = document.createElement('div');
                    optionDiv.className = `option-item ${optionIndex === question.correctOption ? 'correct' : ''}`;
                    optionDiv.innerHTML = `
                        <div class="option-letter">${String.fromCharCode(65 + optionIndex)}</div>
                        <div class="flex-grow">${option}</div>
                        <div class="correct-indicator ${optionIndex === question.correctOption ? '' : 'hidden'}">
                            <i class="fas fa-check text-green-500"></i>
                        </div>
                    `;
                    optionsDiv.appendChild(optionDiv);
                });
                
                // Explanation
                const explanationDiv = document.createElement('div');
                explanationDiv.className = 'mb-4';
                explanationDiv.innerHTML = `
                    <h4 class="font-semibold text-gray-700 mb-2">Explanation</h4>
                    <textarea class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition explanation-textarea" 
                              rows="3" placeholder="Add explanation...">${question.explanation || ''}</textarea>
                `;
                
                // Actions
                const actionsDiv = document.createElement('div');
                actionsDiv.className = 'flex justify-between';
                actionsDiv.innerHTML = `
                    <button class="btn-secondary py-2 px-4 rounded-lg font-bold remove-question">
                        <i class="fas fa-trash mr-2"></i> Remove
                    </button>
                    <div>
                        <button class="btn-secondary py-2 px-4 rounded-lg font-bold mr-2 copy-question">
                            <i class="fas fa-copy mr-2"></i> Copy
                        </button>
                    </div>
                `;
                
                // Add event listeners to action buttons
                actionsDiv.querySelector('.remove-question').addEventListener('click', function() {
                    questionDiv.remove();
                });
                
                actionsDiv.querySelector('.copy-question').addEventListener('click', function() {
                    copyQuestionToClipboard(question);
                });
                
                // Append all elements to question div
                questionDiv.appendChild(questionText);
                questionDiv.appendChild(optionsDiv);
                questionDiv.appendChild(explanationDiv);
                questionDiv.appendChild(actionsDiv);
                
                return questionDiv;
            }
            
            function copyQuestionToClipboard(question) {
                // Build the text to copy
                let textToCopy = question.text + '\n\n';
                
                // Add options
                question.options.forEach((opt, i) => {
                    textToCopy += String.fromCharCode(65 + i) + '. ' + opt + '\n';
                });
                
                // Add correct answer and explanation
                textToCopy += '\nCorrect Answer: ' + String.fromCharCode(65 + question.correctOption) + '\n\n';
                textToCopy += 'Explanation: ' + (question.explanation || '');
                
                navigator.clipboard.writeText(textToCopy).then(() => {
                    // Show a temporary success message
                    const originalText = addToTestButton.innerHTML;
                    addToTestButton.innerHTML = '<i class="fas fa-check mr-2"></i> Copied!';
                    setTimeout(() => {
                        addToTestButton.innerHTML = originalText;
                    }, 2000);
                }).catch(err => {
                    console.error('Failed to copy: ', err);
                });
            }
            
            function addToTest() {
                // Collect all questions
                const questions = [];
                const questionElements = document.querySelectorAll('.result-card');
                
                questionElements.forEach((element, index) => {
                    const questionText = element.querySelector('p.text-gray-800').textContent;
                    const difficulty = element.querySelector('.difficulty-select').value;
                    const explanation = element.querySelector('.explanation-textarea').value;
                    
                    // Extract options
                    const options = [];
                    const optionElements = element.querySelectorAll('.option-item');
                    let correctOption = 0;
                    
                    optionElements.forEach((optionElement, optionIndex) => {
                        const optionText = optionElement.querySelector('div:nth-child(2)').textContent;
                        options.push(optionText);
                        
                        if (optionElement.classList.contains('correct')) {
                            correctOption = optionIndex;
                        }
                    });
                    
                    questions.push({
                        text: questionText,
                        options: options,
                        correctOption: correctOption,
                        explanation: explanation,
                        difficulty: difficulty
                    });
                });
                
                // In a real implementation, you would send this data to the server
                // For now, we'll just show a success message
                alert(`Successfully added ${questions.length} questions to your test! In a real application, this would be saved to the database.`);
                
                // Redirect to create test page with questions pre-filled
                // window.location.href = '/teacher-dashboard/create-test';
            }
            
            function showError(message) {
                errorText.textContent = message;
                errorMessage.classList.remove('hidden');
                loadingIndicator.classList.add('hidden');
            }
            
            function hideError() {
                errorMessage.classList.add('hidden');
            }
        });
    </script>
</body>
</html>
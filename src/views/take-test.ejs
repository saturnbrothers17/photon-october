<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    
    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="/images/favicon.ico">
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&family=Space+Grotesk:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    
    <style>
        * { scroll-behavior: smooth; }
        body { font-family: 'Inter', sans-serif; background: #0f172a; }
        h1, h2, h3, h4, h5, h6 { font-family: 'Space Grotesk', sans-serif; }
        
        .glass {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .option-card {
            transition: all 0.3s ease;
            cursor: pointer;
        }
        
        .option-card:hover {
            transform: translateX(5px);
            border-color: rgba(96, 165, 250, 0.5);
        }
        
        .option-card.selected {
            background: rgba(96, 165, 250, 0.2);
            border-color: #60a5fa;
        }
        
        .question-nav-btn {
            transition: all 0.2s ease;
        }
        
        .question-nav-btn.answered {
            background: rgba(34, 197, 94, 0.2);
            border-color: #22c55e;
        }
        
        .question-nav-btn.current {
            background: rgba(96, 165, 250, 0.3);
            border-color: #60a5fa;
            transform: scale(1.1);
        }
    </style>
</head>
<body class="text-white">
    <!-- Test Header -->
    <div class="fixed top-0 left-0 right-0 glass z-50">
        <div class="container mx-auto px-4 py-4">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-2xl font-bold"><%= test.title %></h1>
                    <p class="text-sm text-gray-400"><%= test.subject %> â€¢ <%= test.questions.length %> Questions</p>
                </div>
                
                <!-- Timer -->
                <div class="flex items-center gap-6">
                    <div class="text-center">
                        <div id="timer" class="text-3xl font-bold text-blue-400">
                            <%= test.duration %>:00
                        </div>
                        <p class="text-xs text-gray-400">Time Remaining</p>
                    </div>
                    
                    <button id="submitTestBtn" class="px-6 py-3 bg-gradient-to-r from-green-600 to-green-700 rounded-xl font-bold hover:scale-105 transition-all">
                        <i class="fas fa-check mr-2"></i> Submit Test
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="pt-32 pb-12 px-4">
        <div class="container mx-auto max-w-7xl">
            <div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
                <!-- Main Question Area -->
                <div class="lg:col-span-3">
                    <div class="glass rounded-2xl p-8">
                        <!-- Question Number -->
                        <div class="flex items-center justify-between mb-6">
                            <h2 class="text-xl font-bold text-blue-400">
                                Question <span id="currentQuestionNum">1</span> of <%= test.questions.length %>
                            </h2>
                            <button id="markForReview" class="px-4 py-2 bg-yellow-500/20 text-yellow-400 rounded-lg hover:bg-yellow-500/30 transition-all">
                                <i class="fas fa-bookmark mr-2"></i> Mark for Review
                            </button>
                        </div>
                        
                        <!-- Question Text -->
                        <div id="questionText" class="text-lg mb-6 leading-relaxed">
                            <!-- Question will be loaded here -->
                        </div>
                        
                        <!-- Diagram (if present) -->
                        <div id="diagramContainer" class="hidden mb-6">
                            <div class="bg-white/5 rounded-xl p-4 border border-white/10">
                                <img id="diagramImage" src="" alt="Question Diagram" class="max-w-full h-auto rounded-lg">
                            </div>
                        </div>
                        
                        <!-- Options -->
                        <div id="optionsContainer" class="space-y-3">
                            <!-- Options will be loaded here -->
                        </div>
                        
                        <!-- Navigation Buttons -->
                        <div class="flex items-center justify-between mt-8 pt-6 border-t border-white/10">
                            <button id="prevBtn" class="px-6 py-3 bg-gray-700 rounded-xl font-bold hover:bg-gray-600 transition-all disabled:opacity-50 disabled:cursor-not-allowed">
                                <i class="fas fa-arrow-left mr-2"></i> Previous
                            </button>
                            
                            <button id="clearBtn" class="px-6 py-3 bg-red-500/20 text-red-400 rounded-xl font-bold hover:bg-red-500/30 transition-all">
                                <i class="fas fa-eraser mr-2"></i> Clear Response
                            </button>
                            
                            <button id="nextBtn" class="px-6 py-3 bg-blue-600 rounded-xl font-bold hover:bg-blue-700 transition-all">
                                Next <i class="fas fa-arrow-right ml-2"></i>
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- Question Navigator Sidebar -->
                <div class="lg:col-span-1">
                    <div class="glass rounded-2xl p-6 sticky top-32">
                        <h3 class="text-lg font-bold mb-4">Question Navigator</h3>
                        
                        <!-- Legend -->
                        <div class="mb-4 space-y-2 text-sm">
                            <div class="flex items-center gap-2">
                                <div class="w-4 h-4 bg-green-500/20 border border-green-500 rounded"></div>
                                <span class="text-gray-400">Answered</span>
                            </div>
                            <div class="flex items-center gap-2">
                                <div class="w-4 h-4 bg-yellow-500/20 border border-yellow-500 rounded"></div>
                                <span class="text-gray-400">Marked</span>
                            </div>
                            <div class="flex items-center gap-2">
                                <div class="w-4 h-4 bg-white/5 border border-white/20 rounded"></div>
                                <span class="text-gray-400">Not Visited</span>
                            </div>
                        </div>
                        
                        <!-- Question Grid -->
                        <div id="questionNav" class="grid grid-cols-5 gap-2">
                            <!-- Question buttons will be generated here -->
                        </div>
                        
                        <!-- Summary -->
                        <div class="mt-6 pt-6 border-t border-white/10 space-y-2 text-sm">
                            <div class="flex justify-between">
                                <span class="text-gray-400">Answered:</span>
                                <span id="answeredCount" class="font-bold text-green-400">0</span>
                            </div>
                            <div class="flex justify-between">
                                <span class="text-gray-400">Not Answered:</span>
                                <span id="notAnsweredCount" class="font-bold text-red-400"><%= test.questions.length %></span>
                            </div>
                            <div class="flex justify-between">
                                <span class="text-gray-400">Marked:</span>
                                <span id="markedCount" class="font-bold text-yellow-400">0</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Submit Confirmation Modal -->
    <div id="submitModal" class="hidden fixed inset-0 bg-black/80 z-50 flex items-center justify-center p-4">
        <div class="glass rounded-2xl p-8 max-w-md w-full">
            <h3 class="text-2xl font-bold mb-4">Submit Test?</h3>
            <p class="text-gray-400 mb-6">Are you sure you want to submit the test? You won't be able to change your answers after submission.</p>
            
            <div class="space-y-3 mb-6 text-sm">
                <div class="flex justify-between">
                    <span>Total Questions:</span>
                    <span class="font-bold"><%= test.questions.length %></span>
                </div>
                <div class="flex justify-between">
                    <span>Answered:</span>
                    <span id="modalAnsweredCount" class="font-bold text-green-400">0</span>
                </div>
                <div class="flex justify-between">
                    <span>Not Answered:</span>
                    <span id="modalNotAnsweredCount" class="font-bold text-red-400"><%= test.questions.length %></span>
                </div>
            </div>
            
            <div class="flex gap-3">
                <button id="cancelSubmit" class="flex-1 px-6 py-3 bg-gray-700 rounded-xl font-bold hover:bg-gray-600 transition-all">
                    Cancel
                </button>
                <button id="confirmSubmit" class="flex-1 px-6 py-3 bg-gradient-to-r from-green-600 to-green-700 rounded-xl font-bold hover:scale-105 transition-all">
                    Submit
                </button>
            </div>
        </div>
    </div>

    <script>
        // Test data from server
        const testData = <%- JSON.stringify(test) %>;
        const testDuration = <%= test.duration %>; // in minutes
        
        let currentQuestionIndex = 0;
        let userAnswers = {};
        let markedQuestions = new Set();
        let timeRemaining = testDuration * 60; // in seconds
        let timerInterval;
        
        // Initialize test
        document.addEventListener('DOMContentLoaded', function() {
            initializeTest();
            startTimer();
            loadQuestion(0);
            generateQuestionNav();
        });
        
        function initializeTest() {
            // Initialize answers object
            testData.questions.forEach((q, index) => {
                userAnswers[index] = null;
            });
        }
        
        function startTimer() {
            updateTimerDisplay();
            
            timerInterval = setInterval(() => {
                timeRemaining--;
                updateTimerDisplay();
                
                if (timeRemaining <= 0) {
                    clearInterval(timerInterval);
                    autoSubmitTest();
                }
            }, 1000);
        }
        
        function updateTimerDisplay() {
            const minutes = Math.floor(timeRemaining / 60);
            const seconds = timeRemaining % 60;
            const timerEl = document.getElementById('timer');
            timerEl.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            
            // Change color when time is running out
            if (timeRemaining < 300) { // Less than 5 minutes
                timerEl.classList.add('text-red-400');
                timerEl.classList.remove('text-blue-400');
            }
        }
        
        function loadQuestion(index) {
            currentQuestionIndex = index;
            const question = testData.questions[index];
            
            // Update question number
            document.getElementById('currentQuestionNum').textContent = index + 1;
            
            // Load question text
            document.getElementById('questionText').innerHTML = question.question_text;
            
            // Load diagram if present
            const diagramContainer = document.getElementById('diagramContainer');
            const diagramImage = document.getElementById('diagramImage');
            
            if (question.diagram) {
                diagramImage.src = question.diagram;
                diagramContainer.classList.remove('hidden');
            } else {
                diagramContainer.classList.add('hidden');
            }
            
            // Load options
            const optionsContainer = document.getElementById('optionsContainer');
            optionsContainer.innerHTML = '';
            
            question.options.forEach((option, optIndex) => {
                const optionCard = document.createElement('div');
                optionCard.className = `option-card glass rounded-xl p-4 border-2 border-white/10 ${userAnswers[index] === optIndex ? 'selected' : ''}`;
                optionCard.innerHTML = `
                    <div class="flex items-center gap-3">
                        <div class="w-8 h-8 rounded-full bg-blue-500/20 flex items-center justify-center font-bold text-blue-400">
                            ${String.fromCharCode(65 + optIndex)}
                        </div>
                        <div class="flex-1">${option.option_text}</div>
                    </div>
                `;
                
                optionCard.addEventListener('click', () => selectOption(index, optIndex));
                optionsContainer.appendChild(optionCard);
            });
            
            // Update navigation buttons
            document.getElementById('prevBtn').disabled = index === 0;
            document.getElementById('nextBtn').textContent = index === testData.questions.length - 1 ? 'Finish' : 'Next';
            
            // Update mark for review button
            const markBtn = document.getElementById('markForReview');
            if (markedQuestions.has(index)) {
                markBtn.innerHTML = '<i class="fas fa-bookmark mr-2"></i> Marked';
                markBtn.classList.add('bg-yellow-500/30');
            } else {
                markBtn.innerHTML = '<i class="far fa-bookmark mr-2"></i> Mark for Review';
                markBtn.classList.remove('bg-yellow-500/30');
            }
            
            updateQuestionNav();
            updateSummary();
        }
        
        function selectOption(questionIndex, optionIndex) {
            userAnswers[questionIndex] = optionIndex;
            loadQuestion(questionIndex);
        }
        
        function generateQuestionNav() {
            const navContainer = document.getElementById('questionNav');
            navContainer.innerHTML = '';
            
            testData.questions.forEach((q, index) => {
                const btn = document.createElement('button');
                btn.className = 'question-nav-btn w-10 h-10 rounded-lg border-2 border-white/20 font-bold hover:scale-110 transition-all';
                btn.textContent = index + 1;
                btn.addEventListener('click', () => loadQuestion(index));
                navContainer.appendChild(btn);
            });
        }
        
        function updateQuestionNav() {
            const buttons = document.querySelectorAll('.question-nav-btn');
            buttons.forEach((btn, index) => {
                btn.classList.remove('answered', 'current');
                
                if (index === currentQuestionIndex) {
                    btn.classList.add('current');
                } else if (userAnswers[index] !== null) {
                    btn.classList.add('answered');
                }
                
                if (markedQuestions.has(index)) {
                    btn.style.borderColor = '#eab308';
                    btn.style.background = 'rgba(234, 179, 8, 0.2)';
                }
            });
        }
        
        function updateSummary() {
            const answered = Object.values(userAnswers).filter(a => a !== null).length;
            const notAnswered = testData.questions.length - answered;
            const marked = markedQuestions.size;
            
            document.getElementById('answeredCount').textContent = answered;
            document.getElementById('notAnsweredCount').textContent = notAnswered;
            document.getElementById('markedCount').textContent = marked;
            
            document.getElementById('modalAnsweredCount').textContent = answered;
            document.getElementById('modalNotAnsweredCount').textContent = notAnswered;
        }
        
        // Event Listeners
        document.getElementById('prevBtn').addEventListener('click', () => {
            if (currentQuestionIndex > 0) {
                loadQuestion(currentQuestionIndex - 1);
            }
        });
        
        document.getElementById('nextBtn').addEventListener('click', () => {
            if (currentQuestionIndex < testData.questions.length - 1) {
                loadQuestion(currentQuestionIndex + 1);
            } else {
                showSubmitModal();
            }
        });
        
        document.getElementById('clearBtn').addEventListener('click', () => {
            userAnswers[currentQuestionIndex] = null;
            loadQuestion(currentQuestionIndex);
        });
        
        document.getElementById('markForReview').addEventListener('click', () => {
            if (markedQuestions.has(currentQuestionIndex)) {
                markedQuestions.delete(currentQuestionIndex);
            } else {
                markedQuestions.add(currentQuestionIndex);
            }
            loadQuestion(currentQuestionIndex);
        });
        
        document.getElementById('submitTestBtn').addEventListener('click', showSubmitModal);
        
        document.getElementById('cancelSubmit').addEventListener('click', () => {
            document.getElementById('submitModal').classList.add('hidden');
        });
        
        document.getElementById('confirmSubmit').addEventListener('click', submitTest);
        
        function showSubmitModal() {
            updateSummary();
            document.getElementById('submitModal').classList.remove('hidden');
        }
        
        async function submitTest() {
            clearInterval(timerInterval);
            
            // Calculate score
            let correctAnswers = 0;
            testData.questions.forEach((question, index) => {
                const userAnswer = userAnswers[index];
                if (userAnswer !== null) {
                    const correctOption = question.options.find(opt => opt.is_correct);
                    const correctIndex = question.options.indexOf(correctOption);
                    if (userAnswer === correctIndex) {
                        correctAnswers++;
                    }
                }
            });
            
            const score = (correctAnswers / testData.questions.length * 100).toFixed(2);
            const timeTaken = testDuration * 60 - timeRemaining; // in seconds
            
            // Submit to backend
            try {
                const response = await fetch('/student-corner/submit-test', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        testId: testData.id,
                        answers: userAnswers,
                        timeTaken: timeTaken,
                        score: parseFloat(score),
                        correctAnswers: correctAnswers,
                        totalQuestions: testData.questions.length
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    window.location.href = data.redirectUrl;
                } else {
                    alert('Failed to submit test. Please try again.');
                }
            } catch (error) {
                console.error('Error submitting test:', error);
                alert('Failed to submit test. Please try again.');
            }
        }
        
        function autoSubmitTest() {
            alert('Time is up! Test will be submitted automatically.');
            submitTest();
        }
        
        // Prevent accidental page close
        window.addEventListener('beforeunload', (e) => {
            e.preventDefault();
            e.returnValue = '';
        });
    </script>
</body>
</html>

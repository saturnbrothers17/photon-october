<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= locals.title || 'Create Test - Faculty Dashboard' %></title>
    <meta name="description" content="<%= locals.description || 'Create a new MCQ test for your students' %>">
    
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/images/favicon.svg">
    <link rel="alternate icon" type="image/x-icon" href="/images/favicon.ico">
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    
    <style>
        body {
            font-family: 'Poppins', sans-serif;
        }
        
        /* Form Styles */
        .form-card {
            transition: all 0.3s ease;
            border-radius: 16px;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }
        
        /* Question Card */
        .question-card {
            transition: all 0.3s ease;
            border-radius: 16px;
            overflow: hidden;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.08);
        }
        
        .question-card:hover {
            box-shadow: 0 10px 25px rgba(30, 64, 175, 0.15);
        }
        
        /* Custom Buttons */
        .btn-primary {
            background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%);
            transition: all 0.3s ease;
            font-weight: 600;
            letter-spacing: 0.5px;
            border-radius: 12px;
            box-shadow: 0 4px 15px rgba(30, 64, 175, 0.3);
        }
        
        .btn-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(30, 64, 175, 0.4);
        }
        
        .btn-secondary {
            background: #f1f5f9;
            color: #1e293b;
            transition: all 0.3s ease;
            font-weight: 600;
            letter-spacing: 0.5px;
            border-radius: 12px;
        }
        
        .btn-secondary:hover {
            background: #e2e8f0;
            transform: translateY(-2px);
        }
        
        /* Option Styles */
        .option-input {
            display: flex;
            align-items: center;
            padding: 12px 16px;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            margin-bottom: 12px;
            transition: all 0.3s ease;
        }
        
        .option-input:hover {
            border-color: #94a3b8;
        }
        
        .option-input.correct {
            border-color: #10b981;
            background-color: #ecfdf5;
        }
        
        .option-input.correct .option-radio {
            background-color: #10b981;
            border-color: #10b981;
        }
        
        .option-radio {
            width: 20px;
            height: 20px;
            border: 2px solid #cbd5e1;
            border-radius: 50%;
            margin-right: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }
        
        .option-radio.selected {
            background-color: #3b82f6;
            border-color: #3b82f6;
        }
        
        .option-radio.selected::after {
            content: "";
            width: 10px;
            height: 10px;
            background-color: white;
            border-radius: 50%;
        }
        
        /* Animated Elements */
        .animate-on-scroll {
            opacity: 0;
            transform: translateY(30px);
            transition: opacity 0.6s ease-out, transform 0.6s ease-out;
        }
        
        .animate-on-scroll.animate-fade-in {
            opacity: 1;
            transform: translateY(0);
        }
    </style>
</head>
<body class="bg-gray-50">
    <!-- Header -->
    <header class="bg-white shadow-sm">
        <div class="container mx-auto px-4">
            <nav class="navbar flex items-center justify-between py-4">
                <a class="navbar-brand flex items-center" href="/">
                    <img src="/images/logo.svg" alt="Photon Coaching Logo" class="h-12">
                </a>
                <div class="hidden md:flex space-x-6">
                    <a class="nav-link hover:text-blue-600" href="/">Home</a>
                    <a class="nav-link hover:text-blue-600" href="/courses">Courses</a>
                    <a class="nav-link hover:text-blue-600" href="/student-corner">Student Corner</a>
                    <a class="nav-link hover:text-blue-600" href="/teacher-dashboard">Faculty Dashboard</a>
                    <a class="nav-link hover:text-blue-600" href="/contact">Contact</a>
                </div>
                <button class="md:hidden text-gray-500">
                    <i class="fas fa-bars text-2xl"></i>
                </button>
            </nav>
        </div>
    </header>

    <!-- Main Content -->
    <main>
        <div class="container mx-auto px-4 py-12">
            <div class="text-center mb-12 animate-on-scroll">
                <h1 class="text-3xl md:text-4xl font-bold mb-4">Create New Test</h1>
                <p class="text-xl text-gray-600">Design an MCQ test for your students</p>
            </div>
            
            <!-- AI Question Extractor Section -->
            <div class="max-w-4xl mx-auto mb-8">
                <div class="form-card bg-gradient-to-br from-purple-500/10 to-pink-500/10 border-2 border-purple-500/30 p-8 animate-on-scroll">
                    <div class="flex items-center gap-4 mb-6">
                        <div class="w-16 h-16 bg-gradient-to-br from-purple-600 to-pink-600 rounded-2xl flex items-center justify-center flex-shrink-0">
                            <i class="fas fa-magic text-white text-2xl"></i>
                        </div>
                        <div>
                            <h2 class="text-2xl font-bold text-gray-900 flex items-center">
                                <i class="fas fa-robot mr-2 text-purple-600"></i>
                                AI Question Extractor
                            </h2>
                            <p class="text-gray-600">Upload an image and let AI extract questions automatically</p>
                        </div>
                    </div>
                    
                    <!-- Upload Area -->
                    <div id="uploadArea" class="border-2 border-dashed border-purple-300 rounded-xl p-8 text-center bg-white/50 hover:bg-white/80 transition-all cursor-pointer">
                        <input type="file" id="aiImageInput" accept="image/*" class="hidden">
                        <i class="fas fa-cloud-upload-alt text-6xl text-purple-500 mb-4"></i>
                        <p class="text-lg font-semibold text-gray-700 mb-2">Drag & Drop your image here</p>
                        <p class="text-gray-500 mb-4">or</p>
                        <button type="button" id="browseBtn" class="px-6 py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-xl font-bold hover:shadow-xl transition-all">
                            <i class="fas fa-folder-open mr-2"></i> Browse Files
                        </button>
                        <p class="text-sm text-gray-400 mt-4">Supports JPG, PNG, GIF (Max 5MB)</p>
                    </div>
                    
                    <!-- Loading State -->
                    <div id="extractionLoading" class="hidden mt-6 text-center">
                        <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mb-4"></div>
                        <p class="text-lg font-semibold text-gray-700">Extracting questions with AI...</p>
                        <p class="text-sm text-gray-500">This may take a few seconds</p>
                    </div>
                    
                    <!-- Extracted Questions Preview -->
                    <div id="extractedQuestionsPreview" class="hidden mt-6">
                        <div class="flex justify-between items-center mb-4">
                            <h3 class="text-xl font-bold text-gray-900">
                                <i class="fas fa-check-circle text-green-500 mr-2"></i>
                                Extracted Questions
                            </h3>
                            <button type="button" id="addAllQuestionsBtn" class="px-4 py-2 bg-green-600 text-white rounded-lg font-bold hover:bg-green-700 transition-all">
                                <i class="fas fa-plus-circle mr-2"></i> Add All to Test
                            </button>
                        </div>
                        <div id="extractedQuestionsList" class="space-y-4 max-h-96 overflow-y-auto">
                            <!-- Extracted questions will appear here -->
                        </div>
                    </div>
                </div>
            </div>
            
            <form id="createTestForm" action="/teacher-dashboard/create-test" method="POST" class="max-w-4xl mx-auto">
                <!-- Test Information -->
                <div class="form-card bg-white p-8 mb-8 animate-on-scroll">
                    <h2 class="text-2xl font-bold mb-6 text-gray-900">Test Information</h2>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                        <div>
                            <label for="testTitle" class="block text-sm font-medium text-gray-700 mb-2">Test Title</label>
                            <input type="text" id="testTitle" name="testTitle" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition" placeholder="e.g., Physics Weekly Test - Thermodynamics">
                        </div>
                        
                        <div>
                            <label for="testSubject" class="block text-sm font-medium text-gray-700 mb-2">Subject</label>
                            <select id="testSubject" name="testSubject" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                                <option value="">Select Subject</option>
                                <option value="Physics">Physics</option>
                                <option value="Chemistry">Chemistry</option>
                                <option value="Mathematics">Mathematics</option>
                                <option value="Biology">Biology</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                        <div>
                            <label for="testDuration" class="block text-sm font-medium text-gray-700 mb-2">Duration (minutes)</label>
                            <input type="number" id="testDuration" name="testDuration" min="1" max="180" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition" placeholder="e.g., 60">
                        </div>
                        
                        <div>
                            <label for="testDate" class="block text-sm font-medium text-gray-700 mb-2">Scheduled Date (Optional)</label>
                            <input type="date" id="testDate" name="testDate" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                        </div>
                    </div>
                    
                    
                    
                    <!-- Test Type and Maximum Marks -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                        <div>
                            <label for="testType" class="block text-sm font-medium text-gray-700 mb-2">
                                <i class="fas fa-graduation-cap mr-1 text-indigo-500"></i>Test Type
                            </label>
                            <select id="testType" name="testType" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                                <option value="">Select Test Type</option>
                                <option value="JEE Mains">JEE Mains</option>
                                <option value="JEE Advanced">JEE Advanced</option>
                                <option value="NEET">NEET</option>
                                <option value="Other">Other</option>
                            </select>
                            <p class="text-xs text-gray-500 mt-1">Choose the exam type for this test</p>
                        </div>
                        
                        <div>
                            <label for="maxMarks" class="block text-sm font-medium text-gray-700 mb-2">
                                <i class="fas fa-trophy mr-1 text-yellow-500"></i>Maximum Marks
                            </label>
                            <input type="number" id="maxMarks" name="maxMarks" min="1" max="1000" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition" placeholder="e.g., 100">
                            <p class="text-xs text-gray-500 mt-1">Total marks for this test (auto-calculated: questions × 4)</p>
                        </div>
                    </div>
                    <!-- Test Scheduling Section -->
                    <div class="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                        <div class="flex items-center mb-3">
                            <i class="fas fa-clock text-blue-600 mr-2"></i>
                            <h3 class="text-lg font-semibold text-blue-900">Test Scheduling (Optional)</h3>
                        </div>
                        <p class="text-sm text-blue-700 mb-4">Set specific start and end times to control when students can take this test</p>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label for="startTime" class="block text-sm font-medium text-blue-900 mb-2">
                                    <i class="fas fa-play-circle mr-1"></i>Start Time
                                </label>
                                <input type="datetime-local" id="startTime" name="startTime" class="w-full px-4 py-3 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition bg-white">
                                <p class="text-xs text-blue-600 mt-1">When students can start taking the test</p>
                            </div>
                            
                            <div>
                                <label for="endTime" class="block text-sm font-medium text-blue-900 mb-2">
                                    <i class="fas fa-stop-circle mr-1"></i>End Time
                                </label>
                                <input type="datetime-local" id="endTime" name="endTime" class="w-full px-4 py-3 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition bg-white">
                                <p class="text-xs text-blue-600 mt-1">When the test becomes unavailable</p>
                            </div>
                        </div>
                        
                        <div class="mt-3 p-3 bg-blue-100 rounded-lg">
                            <p class="text-sm text-blue-800">
                                <i class="fas fa-info-circle mr-1"></i>
                                <strong>Note:</strong> If no times are set, the test will be immediately available to students after creation.
                            </p>
                        </div>
                    </div>
                    <div class="mb-6">
                        <label for="testDescription" class="block text-sm font-medium text-gray-700 mb-2">Test Description</label>
                        <textarea id="testDescription" name="testDescription" rows="3" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition" placeholder="Brief description of the test content and objectives"></textarea>
                    </div>
                </div>
                
                <!-- Questions Section -->
                <div class="form-card bg-white p-8 mb-8 animate-on-scroll">
                    <div class="flex justify-between items-center mb-6">
                        <h2 class="text-2xl font-bold text-gray-900">Questions</h2>
                        <button type="button" id="addQuestionBtn" class="btn-secondary py-2 px-4 rounded-lg font-bold flex items-center">
                            <i class="fas fa-plus mr-2"></i> Add Question
                        </button>
                    </div>
                    
                    <div id="questionsContainer">
                        <!-- Question 1 -->
                        <div class="question-card bg-gray-50 p-6 mb-6" data-question-index="1">
                            <div class="flex justify-between items-center mb-4">
                                <h3 class="text-lg font-bold text-gray-900">Question 1</h3>
                                <button type="button" class="text-red-500 hover:text-red-700 remove-question">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                            
                            <div class="mb-4">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Question Text</label>
                                <textarea name="questions[0][text]" rows="2" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition" placeholder="Enter your question here..."></textarea>
                            </div>
                            
                            <div class="mb-4">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Options</label>
                                <div class="options-container">
                                    <!-- Option A -->
                                    <div class="option-input" data-option-index="0">
                                        <div class="option-radio"></div>
                                        <input type="text" name="questions[0][options][0]" class="w-full focus:outline-none bg-transparent" placeholder="Option A">
                                        <input type="hidden" name="questions[0][correctOption]" class="correct-option-input" value="">
                                    </div>
                                    
                                    <!-- Option B -->
                                    <div class="option-input" data-option-index="1">
                                        <div class="option-radio"></div>
                                        <input type="text" name="questions[0][options][1]" class="w-full focus:outline-none bg-transparent" placeholder="Option B">
                                        <input type="hidden" name="questions[0][correctOption]" class="correct-option-input" value="">
                                    </div>
                                    
                                    <!-- Option C -->
                                    <div class="option-input" data-option-index="2">
                                        <div class="option-radio"></div>
                                        <input type="text" name="questions[0][options][2]" class="w-full focus:outline-none bg-transparent" placeholder="Option C">
                                        <input type="hidden" name="questions[0][correctOption]" class="correct-option-input" value="">
                                    </div>
                                    
                                    <!-- Option D -->
                                    <div class="option-input" data-option-index="3">
                                        <div class="option-radio"></div>
                                        <input type="text" name="questions[0][options][3]" class="w-full focus:outline-none bg-transparent" placeholder="Option D">
                                        <input type="hidden" name="questions[0][correctOption]" class="correct-option-input" value="">
                                    </div>
                                </div>
                            </div>
                            
                            <div class="mb-4">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Explanation (Optional)</label>
                                <textarea name="questions[0][explanation]" rows="2" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition" placeholder="Explanation for the correct answer..."></textarea>
                            </div>
                            
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Difficulty Level</label>
                                <select name="questions[0][difficulty]" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                                    <option value="easy">Easy</option>
                                    <option value="medium" selected>Medium</option>
                                    <option value="hard">Hard</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Submit Section -->
                <div class="text-center animate-on-scroll">
                    <button type="submit" class="btn-primary py-4 px-10 rounded-lg text-xl font-bold inline-flex items-center">
                        <i class="fas fa-paper-plane mr-3"></i> Create Test
                    </button>
                </div>
            </form>
        </div>
    </main>

    <!-- Footer -->
    <footer class="bg-gray-800 text-white py-8">
        <div class="container mx-auto px-4">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
                <div>
                    <h3 class="text-xl font-bold mb-4">Photon Coaching</h3>
                    <p>Best IIT JEE & NEET Coaching Institute in Varanasi</p>
                </div>
                <div>
                    <h3 class="text-xl font-bold mb-4">Quick Links</h3>
                    <ul class="space-y-2">
                        <li><a href="/" class="hover:text-blue-300">Home</a></li>
                        <li><a href="/courses" class="hover:text-blue-300">Courses</a></li>
                        <li><a href="/student-corner" class="hover:text-blue-300">Student Corner</a></li>
                        <li><a href="/teacher-dashboard" class="hover:text-blue-300">Faculty Dashboard</a></li>
                        <li><a href="/contact" class="hover:text-blue-300">Contact</a></li>
                    </ul>
                </div>
                <div>
                    <h3 class="text-xl font-bold mb-4">Contact Us</h3>
                    <p><i class="fas fa-phone mr-2"></i> +91 9450545318</p>
                    <p><i class="fas fa-envelope mr-2"></i> info@photoncoaching.in</p>
                    <p><i class="fas fa-map-marker-alt mr-2"></i> Varanasi, Uttar Pradesh</p>
                </div>
            </div>
            <div class="border-t border-gray-700 mt-8 pt-6 text-center">
                <p>&copy; 2025 Photon Coaching. All rights reserved.</p>
            </div>
        </div>
    </footer>

    <!-- JavaScript -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Scroll animation observer
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('animate-fade-in');
                    }
                });
            }, {
                threshold: 0.1,
                rootMargin: '0px 0px -50px 0px'
            });
            
            document.querySelectorAll('.animate-on-scroll').forEach(el => {
                observer.observe(el);
            });
            
            // Option selection functionality
            document.addEventListener('click', function(e) {
                // Handle option selection
                if (e.target.closest('.option-input')) {
                    const optionInput = e.target.closest('.option-input');
                    const questionCard = optionInput.closest('.question-card');
                    const optionIndex = optionInput.dataset.optionIndex;
                    
                    // Remove correct class from all options in this question
                    questionCard.querySelectorAll('.option-input').forEach(opt => {
                        opt.classList.remove('correct');
                    });
                    
                    // Add correct class to selected option
                    optionInput.classList.add('correct');
                    
                    // Update hidden input with correct option index
                    const correctOptionInput = questionCard.querySelector('.correct-option-input');
                    if (correctOptionInput) {
                        correctOptionInput.value = optionIndex;
                    }
                }
                
                // Handle radio button selection
                if (e.target.closest('.option-radio')) {
                    const radio = e.target.closest('.option-radio');
                    const optionInput = radio.closest('.option-input');
                    const questionCard = optionInput.closest('.question-card');
                    const optionIndex = optionInput.dataset.optionIndex;
                    
                    // Remove selected class from all radios in this question
                    questionCard.querySelectorAll('.option-radio').forEach(r => {
                        r.classList.remove('selected');
                    });
                    
                    // Add selected class to clicked radio
                    radio.classList.add('selected');
                    
                    // Update hidden input with correct option index
                    const correctOptionInput = questionCard.querySelector('.correct-option-input');
                    if (correctOptionInput) {
                        correctOptionInput.value = optionIndex;
                    }
                }
            });
            
            // Add question functionality
            document.getElementById('addQuestionBtn').addEventListener('click', function() {
                const questionsContainer = document.getElementById('questionsContainer');
                const questionCount = questionsContainer.children.length + 1;
                
                const questionTemplate = `
                    <div class="question-card bg-gray-50 p-6 mb-6" data-question-index="${questionCount}">
                        <div class="flex justify-between items-center mb-4">
                            <h3 class="text-lg font-bold text-gray-900">Question ${questionCount}</h3>
                            <button type="button" class="text-red-500 hover:text-red-700 remove-question">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                        
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700 mb-2">Question Text</label>
                            <textarea name="questions[${questionCount-1}][text]" rows="2" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition" placeholder="Enter your question here..."></textarea>
                        </div>
                        
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700 mb-2">Options</label>
                            <div class="options-container">
                                <!-- Option A -->
                                <div class="option-input" data-option-index="0">
                                    <div class="option-radio"></div>
                                    <input type="text" name="questions[${questionCount-1}][options][0]" class="w-full focus:outline-none bg-transparent" placeholder="Option A">
                                    <input type="hidden" name="questions[${questionCount-1}][correctOption]" class="correct-option-input" value="">
                                </div>
                                
                                <!-- Option B -->
                                <div class="option-input" data-option-index="1">
                                    <div class="option-radio"></div>
                                    <input type="text" name="questions[${questionCount-1}][options][1]" class="w-full focus:outline-none bg-transparent" placeholder="Option B">
                                    <input type="hidden" name="questions[${questionCount-1}][correctOption]" class="correct-option-input" value="">
                                </div>
                                
                                <!-- Option C -->
                                <div class="option-input" data-option-index="2">
                                    <div class="option-radio"></div>
                                    <input type="text" name="questions[${questionCount-1}][options][2]" class="w-full focus:outline-none bg-transparent" placeholder="Option C">
                                    <input type="hidden" name="questions[${questionCount-1}][correctOption]" class="correct-option-input" value="">
                                </div>
                                
                                <!-- Option D -->
                                <div class="option-input" data-option-index="3">
                                    <div class="option-radio"></div>
                                    <input type="text" name="questions[${questionCount-1}][options][3]" class="w-full focus:outline-none bg-transparent" placeholder="Option D">
                                    <input type="hidden" name="questions[${questionCount-1}][correctOption]" class="correct-option-input" value="">
                                </div>
                            </div>
                        </div>
                        
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700 mb-2">Explanation (Optional)</label>
                            <textarea name="questions[${questionCount-1}][explanation]" rows="2" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition" placeholder="Explanation for the correct answer..."></textarea>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Difficulty Level</label>
                            <select name="questions[${questionCount-1}][difficulty]" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                                <option value="easy">Easy</option>
                                <option value="medium" selected>Medium</option>
                                <option value="hard">Hard</option>
                            </select>
                        </div>
                    </div>
                `;
                
                questionsContainer.insertAdjacentHTML('beforeend', questionTemplate);
            });
            
            // Remove question functionality
            document.addEventListener('click', function(e) {
                if (e.target.closest('.remove-question')) {
                    const questionCard = e.target.closest('.question-card');
                    if (questionCard) {
                        // Don't remove if it's the last question
                        if (document.querySelectorAll('.question-card').length > 1) {
                            questionCard.remove();
                            
                            // Renumber questions
                            const questions = document.querySelectorAll('.question-card');
                            questions.forEach((question, index) => {
                                const questionNumber = index + 1;
                                question.querySelector('h3').textContent = `Question ${questionNumber}`;
                                question.dataset.questionIndex = questionNumber;
                                
                                // Update input names
                                const inputs = question.querySelectorAll('input, textarea, select');
                                inputs.forEach(input => {
                                    const name = input.getAttribute('name');
                                    if (name) {
                                        const newName = name.replace(/\[\d+\]/, `[${index}]`);
                                        input.setAttribute('name', newName);
                                    }
                                });
                            });
                        } else {
                            alert('You must have at least one question in the test.');
                        }
                    }
                }
            });
            
            // Form submission with chunked upload
            document.getElementById('createTestForm').addEventListener('submit', async function(e) {
                e.preventDefault(); // Prevent default form submission
                
                // Collect test metadata
                const testData = {
                    title: document.getElementById('testTitle').value,
                    description: document.getElementById('testDescription').value,
                    subject: document.getElementById('testSubject').value,
                    duration: document.getElementById('testDuration').value,
                    scheduled_date: document.getElementById('testDate').value,
                    start_time: document.getElementById('startTime')?.value || null,
                    end_time: document.getElementById('endTime')?.value || null,
                    testType: document.getElementById('testType').value,
                    maxMarks: document.getElementById('maxMarks').value
                };
                
                // Validate required fields
                if (!testData.title || !testData.subject || !testData.duration) {
                    alert('Please fill in all required fields (Title, Subject, Duration)');
                    return;
                }
                
                // Collect all questions from the form
                const questions = collectQuestionsFromForm();
                
                if (questions.length === 0) {
                    alert('Please add at least one question to the test');
                    return;
                }
                
                // Show progress modal
                showProgressModal();
                
                // Small delay to ensure modal is visible
                await new Promise(resolve => setTimeout(resolve, 100));
                
                try {
                    // Step 1: Initialize test
                    updateProgress(0, questions.length, 'Initializing test...');
                    console.log('Starting test initialization...');
                    const initResponse = await fetch('/teacher-dashboard/api/create-test-init', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(testData)
                    });
                    
                    if (!initResponse.ok) {
                        const errorText = await initResponse.text();
                        console.error('Init response error:', errorText);
                        
                        // Try to parse as JSON first, fallback to text
                        let errorMessage = 'Failed to initialize test';
                        try {
                            const errorJson = JSON.parse(errorText);
                            errorMessage = errorJson.error || errorMessage;
                        } catch (e) {
                            // If not JSON, check if it's HTML (authentication redirect)
                            if (errorText.includes('<!DOCTYPE') || errorText.includes('<html>')) {
                                errorMessage = 'Authentication required. Please log in again.';
                                // Redirect to login after a short delay
                                setTimeout(() => {
                                    window.location.href = '/auth/faculty-login?redirect=' + encodeURIComponent(window.location.pathname);
                                }, 2000);
                            } else {
                                errorMessage = errorText || errorMessage;
                            }
                        }
                        throw new Error(errorMessage);
                    }
                    
                    const initResult = await initResponse.json();
                    const { test_id } = initResult;
                    
                    // Step 2: Upload questions one by one with retry logic
                    const failedQuestions = [];
                    
                    for (let i = 0; i < questions.length; i++) {
                        updateProgress(i + 1, questions.length, `Uploading question ${i + 1} of ${questions.length}...`);
                        
                        let uploaded = false;
                        let retries = 3;
                        let lastError = null;
                        
                        while (!uploaded && retries > 0) {
                            try {
                                const questionData = {
                                    test_id: test_id,
                                    question_text: questions[i].text,
                                    diagram: questions[i].diagram || null,
                                    explanation: questions[i].explanation || '',
                                    difficulty: questions[i].difficulty || 'medium',
                                    options: questions[i].options
                                };
                                
                                const questionResponse = await fetch('/teacher-dashboard/api/add-question', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify(questionData)
                                });
                                
                                if (!questionResponse.ok) {
                                    const errorText = await questionResponse.text();
                                    console.error('Question response error:', errorText);
                                    
                                    // Try to parse as JSON first, fallback to text
                                    let errorMessage = `HTTP ${questionResponse.status}`;
                                    try {
                                        const errorJson = JSON.parse(errorText);
                                        errorMessage = errorJson.error || errorMessage;
                                    } catch (e) {
                                        // If not JSON, check if it's HTML (authentication redirect)
                                        if (errorText.includes('<!DOCTYPE') || errorText.includes('<html>')) {
                                            errorMessage = 'Authentication required. Please log in again.';
                                        } else {
                                            errorMessage = errorText || errorMessage;
                                        }
                                    }
                                    throw new Error(errorMessage);
                                }
                                
                                const result = await questionResponse.json();
                                
                                // Validate that question was actually saved
                                if (!result.success || !result.question_id) {
                                    throw new Error('No question_id returned from server');
                                }
                                
                                uploaded = true;
                                console.log(`✓ Question ${i + 1} uploaded successfully (ID: ${result.question_id})`);
                                
                            } catch (error) {
                                retries--;
                                lastError = error;
                                console.error(`✗ Question ${i + 1} failed (attempt ${3-retries}/3):`, error.message);
                                
                                if (retries > 0) {
                                    // Wait before retry (exponential backoff)
                                    const waitTime = (3 - retries) * 1000;
                                    console.log(`  Retrying in ${waitTime}ms...`);
                                    await new Promise(resolve => setTimeout(resolve, waitTime));
                                } else {
                                    failedQuestions.push({ number: i + 1, error: lastError.message });
                                    console.error(`✗✗✗ Question ${i + 1} FAILED after 3 attempts`);
                                }
                            }
                        }
                        
                        // Small delay between questions
                        await new Promise(resolve => setTimeout(resolve, 100));
                    }
                    
                    // Check if any questions failed
                    if (failedQuestions.length > 0) {
                        const failedNumbers = failedQuestions.map(q => q.number).join(', ');
                        throw new Error(`Failed to upload ${failedQuestions.length} question(s): ${failedNumbers}. Please try again.`);
                    }
                    
                    // Step 3: Finalize test
                    updateProgress(questions.length, questions.length, 'Finalizing test...');
                    await fetch('/teacher-dashboard/api/finalize-test', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ test_id })
                    });
                    
                    // Success!
                    showSuccessMessage(questions.length);
                    setTimeout(() => {
                        window.location.href = '/teacher-dashboard?testCreated=true';
                    }, 2000);
                    
                } catch (error) {
                    console.error('Error creating test:', error);
                    hideProgressModal();
                    alert('Error creating test: ' + error.message + '. Please try again.');
                }
            });
            
            // Helper function to collect questions from form
            function collectQuestionsFromForm() {
                const questions = [];
                const questionCards = document.querySelectorAll('.question-card');
                
                questionCards.forEach((card, index) => {
                    const questionText = card.querySelector(`textarea[name^="questions"][name$="[text]"]`)?.value;
                    const diagram = card.querySelector('.diagram-data')?.value || null;
                    const explanation = card.querySelector(`textarea[name^="questions"][name$="[explanation]"]`)?.value || '';
                    const difficulty = card.querySelector(`select[name^="questions"][name$="[difficulty]"]`)?.value || 'medium';
                    
                    // Get options
                    const optionInputs = card.querySelectorAll('.option-input input[type="text"]');
                    const correctOptionInput = card.querySelector('input[name$="[correctOption]"]');
                    const correctOptionIndex = correctOptionInput ? parseInt(correctOptionInput.value) : 0;
                    
                    const options = [];
                    optionInputs.forEach((input, optIndex) => {
                        if (input.value.trim()) {
                            options.push({
                                text: input.value.trim(),
                                is_correct: optIndex === correctOptionIndex
                            });
                        }
                    });
                    
                    if (questionText && questionText.trim() && options.length >= 2) {
                        questions.push({
                            text: questionText.trim(),
                            diagram: diagram,
                            explanation: explanation,
                            difficulty: difficulty,
                            options: options
                        });
                    }
                });
                
                return questions;
            }
            
            // Progress modal functions
            function showProgressModal() {
                console.log('Showing progress modal...'); // Debug log
                const modal = document.createElement('div');
                modal.id = 'progressModal';
                modal.className = 'fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center';
                modal.style.zIndex = '9999'; // Force high z-index
                modal.style.position = 'fixed';
                modal.style.top = '0';
                modal.style.left = '0';
                modal.style.width = '100%';
                modal.style.height = '100%';
                modal.innerHTML = `
                    <div class="bg-white rounded-2xl p-8 max-w-md w-full mx-4 shadow-2xl" style="z-index: 10000;">
                        <div class="text-center">
                            <div class="mb-4">
                                <i class="fas fa-cloud-upload-alt text-6xl text-blue-600 animate-pulse"></i>
                            </div>
                            <h3 class="text-2xl font-bold text-gray-900 mb-2">Creating Test...</h3>
                            <p id="progressText" class="text-gray-600 mb-4">Initializing...</p>
                            <div class="w-full bg-gray-200 rounded-full h-4 mb-2">
                                <div id="progressBar" class="bg-blue-600 h-4 rounded-full transition-all duration-300" style="width: 0%"></div>
                            </div>
                            <p id="progressCount" class="text-sm text-gray-500">0 / 0 questions uploaded</p>
                            <p class="text-xs text-gray-400 mt-4">Please don't close this window</p>
                        </div>
                    </div>
                `;
                document.body.appendChild(modal);
                console.log('Progress modal added to DOM'); // Debug log
            }
            
            function updateProgress(current, total, message) {
                const progressBar = document.getElementById('progressBar');
                const progressText = document.getElementById('progressText');
                const progressCount = document.getElementById('progressCount');
                
                if (progressBar && progressText && progressCount) {
                    const percentage = total > 0 ? (current / total) * 100 : 0;
                    progressBar.style.width = percentage + '%';
                    progressText.textContent = message;
                    progressCount.textContent = `${current} / ${total} questions uploaded`;
                }
            }
            
            function showSuccessMessage(questionCount) {
                const modal = document.getElementById('progressModal');
                if (modal) {
                    modal.innerHTML = `
                        <div class="bg-white rounded-2xl p-8 max-w-md w-full mx-4 shadow-2xl">
                            <div class="text-center">
                                <div class="mb-4">
                                    <i class="fas fa-check-circle text-6xl text-green-600"></i>
                                </div>
                                <h3 class="text-2xl font-bold text-gray-900 mb-2">Test Created Successfully!</h3>
                                <p class="text-gray-600 mb-4">${questionCount} questions uploaded</p>
                                <p class="text-sm text-gray-500">Redirecting to dashboard...</p>
                            </div>
                        </div>
                    `;
                }
            }
            
            function hideProgressModal() {
                const modal = document.getElementById('progressModal');
                if (modal) {
                    modal.remove();
                }
            }
            
            // AI EXTRACTION
            const uploadArea = document.getElementById('uploadArea');
            const aiImageInput = document.getElementById('aiImageInput');
            const browseBtn = document.getElementById('browseBtn');
            
            browseBtn.addEventListener('click', () => aiImageInput.click());
            uploadArea.addEventListener('click', (e) => {
                if (!browseBtn.contains(e.target)) aiImageInput.click();
            });
            
            aiImageInput.addEventListener('change', async (e) => {
                if (e.target.files.length > 0) {
                    const file = e.target.files[0];
                    uploadArea.classList.add('hidden');
                    document.getElementById('extractionLoading').classList.remove('hidden');
                    
                    const formData = new FormData();
                    formData.append('image', file);
                    
                    try {
                        const response = await fetch('/ai-extractor/upload', {
                            method: 'POST',
                            body: formData
                        });
                        
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        
                        const data = await response.json();
                        console.log('API Response:', data);
                        
                        if (data.success && data.questions && data.questions.length > 0) {
                            document.getElementById('extractionLoading').classList.add('hidden');
                            
                            // Automatically add all extracted questions to the form
                            window.extractedQuestions = data.questions;
                            
                            data.questions.forEach((q, index) => {
                                addExtractedQuestion(index);
                            });
                            
                            // Show success message
                            alert(`✅ Successfully added ${data.questions.length} question(s) to the test!`);
                            
                            // Reset upload area
                            uploadArea.classList.remove('hidden');
                            document.getElementById('extractedQuestionsPreview').classList.add('hidden');
                            aiImageInput.value = '';
                            
                            // Scroll to the questions section
                            document.getElementById('questionsContainer').scrollIntoView({ behavior: 'smooth', block: 'start' });
                        } else {
                            throw new Error('No questions found in response');
                        }
                    } catch (error) {
                        console.error('Extraction error:', error);
                        alert('Extraction failed: ' + error.message);
                        uploadArea.classList.remove('hidden');
                        document.getElementById('extractionLoading').classList.add('hidden');
                    }
                }
            });
            
            window.addExtractedQuestion = function(index) {
                const q = window.extractedQuestions[index];
                const container = document.getElementById('questionsContainer');
                const count = container.children.length + 1;
                const questionId = `question-${count}-${Date.now()}`;
                
                container.insertAdjacentHTML('beforeend', `
                    <div class="question-card bg-gray-50 p-6 mb-6" data-question-id="${questionId}">
                        <div class="flex justify-between mb-4">
                            <h3 class="text-lg font-bold">Question ${count}</h3>
                            <button type="button" class="text-red-500 remove-question"><i class="fas fa-trash"></i></button>
                        </div>
                        
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700 mb-2">Question Text</label>
                            <textarea name="questions[${count-1}][text]" rows="2" class="w-full px-4 py-3 border rounded-lg">${q.text}</textarea>
                        </div>
                        
                        <!-- Diagram Upload Section -->
                        <div class="mb-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                            <div class="flex items-center justify-between mb-2">
                                <label class="block text-sm font-medium text-blue-900">
                                    <i class="fas fa-image mr-2"></i>Attach Diagram (Optional)
                                </label>
                                <button type="button" class="attach-diagram-btn px-3 py-1 bg-blue-600 text-white rounded-lg text-sm hover:bg-blue-700 transition-all">
                                    <i class="fas fa-upload mr-1"></i> Upload
                                </button>
                            </div>
                            <input type="file" class="diagram-input hidden" accept="image/*" data-question-index="${count-1}">
                            <div class="diagram-preview hidden mt-3">
                                <img src="" alt="Diagram" class="max-w-full h-auto rounded-lg border border-gray-300 max-h-64">
                                <button type="button" class="remove-diagram-btn mt-2 px-3 py-1 bg-red-500 text-white rounded-lg text-sm hover:bg-red-600">
                                    <i class="fas fa-times mr-1"></i> Remove
                                </button>
                                <input type="hidden" name="questions[${count-1}][diagram]" class="diagram-data">
                            </div>
                        </div>
                        
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700 mb-2">Options</label>
                            <div class="options-container">
                                ${q.options.map((opt, i) => `
                                    <div class="option-input ${i === q.correctOption ? 'correct' : ''}" data-option-index="${i}">
                                        <div class="option-radio ${i === q.correctOption ? 'selected' : ''}"></div>
                                        <input type="text" name="questions[${count-1}][options][${i}]" value="${opt}" class="w-full">
                                        ${i === 0 ? `<input type="hidden" name="questions[${count-1}][correctOption]" value="${q.correctOption}">` : ''}
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    </div>
                `);
                
                // Add event listeners for diagram upload
                const questionCard = container.querySelector(`[data-question-id="${questionId}"]`);
                const attachBtn = questionCard.querySelector('.attach-diagram-btn');
                const diagramInput = questionCard.querySelector('.diagram-input');
                const diagramPreview = questionCard.querySelector('.diagram-preview');
                const diagramImg = diagramPreview.querySelector('img');
                const diagramData = questionCard.querySelector('.diagram-data');
                const removeBtn = questionCard.querySelector('.remove-diagram-btn');
                
                attachBtn.addEventListener('click', () => diagramInput.click());
                
                diagramInput.addEventListener('change', function(e) {
                    const file = e.target.files[0];
                    if (file && file.type.startsWith('image/')) {
                        const reader = new FileReader();
                        reader.onload = function(event) {
                            diagramImg.src = event.target.result;
                            diagramData.value = event.target.result;
                            diagramPreview.classList.remove('hidden');
                            attachBtn.innerHTML = '<i class="fas fa-check mr-1"></i> Attached';
                            attachBtn.classList.add('bg-green-600');
                        };
                        reader.readAsDataURL(file);
                    }
                });
                
                removeBtn.addEventListener('click', function() {
                    diagramImg.src = '';
                    diagramData.value = '';
                    diagramInput.value = '';
                    diagramPreview.classList.add('hidden');
                    attachBtn.innerHTML = '<i class="fas fa-upload mr-1"></i> Upload';
                    attachBtn.classList.remove('bg-green-600');
                });
            };
        });
    </script>
</body>
</html>

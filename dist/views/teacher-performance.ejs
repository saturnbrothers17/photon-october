<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&family=Space+Grotesk:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    
    <style>
        * { scroll-behavior: smooth; }
        body { font-family: 'Inter', sans-serif; background: #0f172a; }
        h1, h2, h3, h4, h5, h6 { font-family: 'Space Grotesk', sans-serif; }
        
        .glass {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .gradient-text {
            background: linear-gradient(135deg, #60a5fa 0%, #a78bfa 50%, #f472b6 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
    </style>
</head>
<body class="text-white">
    <div class="min-h-screen py-12 px-4">
        <div class="container mx-auto max-w-7xl">
            <!-- Header -->
            <div class="mb-12">
                <a href="/teacher-dashboard" class="inline-flex items-center text-blue-400 hover:text-blue-300 mb-6">
                    <i class="fas fa-arrow-left mr-2"></i> Back to Dashboard
                </a>
                <h1 class="text-4xl md:text-5xl font-black mb-4">
                    Performance <span class="gradient-text">Analytics</span>
                </h1>
                <p class="text-gray-400 text-lg">Real-time student performance tracking</p>
            </div>

            <!-- Test Filter -->
            <div class="glass rounded-2xl p-6 mb-8">
                <div class="flex flex-col md:flex-row gap-4 items-center">
                    <div class="flex-1 w-full">
                        <label class="block text-sm font-medium text-gray-400 mb-2">
                            <i class="fas fa-filter mr-2"></i> Filter by Test
                        </label>
                        <select id="testFilter" class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white focus:outline-none focus:border-blue-500" style="color-scheme: dark;">
                            <option value="" style="background-color: #1e293b; color: white;">All Tests</option>
                            <% tests.forEach(test => { %>
                                <option value="<%= test.id %>" style="background-color: #1e293b; color: white;"><%= test.title %> - <%= test.subject %></option>
                            <% }); %>
                        </select>
                    </div>
                    <div class="flex gap-3">
                        <button id="refreshBtn" class="px-6 py-3 bg-blue-600 rounded-xl font-bold hover:bg-blue-700 transition-all">
                            <i class="fas fa-sync-alt mr-2"></i> Refresh
                        </button>
                        <button id="exportBtn" class="px-6 py-3 bg-green-600 rounded-xl font-bold hover:bg-green-700 transition-all">
                            <i class="fas fa-download mr-2"></i> Export
                        </button>
                    </div>
                </div>
            </div>

            <!-- Overall Statistics -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
                <div class="glass rounded-2xl p-6 text-center">
                    <div class="text-4xl font-black text-blue-400 mb-2" id="totalTests"><%= tests.length %></div>
                    <div class="text-gray-400">Total Tests</div>
                </div>
                <div class="glass rounded-2xl p-6 text-center">
                    <div class="text-4xl font-black text-green-400 mb-2" id="totalAttempts">0</div>
                    <div class="text-gray-400">Total Attempts</div>
                </div>
                <div class="glass rounded-2xl p-6 text-center">
                    <div class="text-4xl font-black text-purple-400 mb-2" id="avgScore">0%</div>
                    <div class="text-gray-400">Average Score</div>
                </div>
                <div class="glass rounded-2xl p-6 text-center">
                    <div class="text-4xl font-black text-yellow-400 mb-2" id="activeStudents">0</div>
                    <div class="text-gray-400">Active Students</div>
                </div>
            </div>

            <!-- Student Performance Table -->
            <div class="glass rounded-2xl p-6">
                <h3 class="text-2xl font-bold mb-6">
                    <i class="fas fa-chart-line mr-2"></i> Student Performance
                </h3>
                
                <div id="noDataMessage" class="text-center py-12 hidden">
                    <i class="fas fa-inbox text-6xl text-gray-600 mb-4"></i>
                    <p class="text-gray-400 text-lg">Select a test to view student performance</p>
                </div>
                
                <div id="performanceTable" class="overflow-x-auto">
                    <table class="w-full">
                        <thead>
                            <tr class="border-b border-white/10">
                                <th class="text-left py-4 px-4 text-gray-400 font-semibold">Rank</th>
                                <th class="text-left py-4 px-4 text-gray-400 font-semibold">Student Name</th>
                                <th class="text-left py-4 px-4 text-gray-400 font-semibold">Score</th>
                                <th class="text-left py-4 px-4 text-gray-400 font-semibold">Correct/Total</th>
                                <th class="text-left py-4 px-4 text-gray-400 font-semibold">Time Taken</th>
                                <th class="text-left py-4 px-4 text-gray-400 font-semibold">Submitted At</th>
                            </tr>
                        </thead>
                        <tbody id="performanceTableBody">
                            <!-- Data will be loaded here -->
                        </tbody>
                    </table>
                </div>
                
                <div id="loadingMessage" class="text-center py-12 hidden">
                    <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-400 mx-auto mb-4"></div>
                    <p class="text-gray-400">Loading performance data...</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentTestId = null;
        
        // Load all analytics on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadOverallStats();
        });
        
        // Test filter change
        document.getElementById('testFilter').addEventListener('change', function() {
            const testId = this.value;
            currentTestId = testId;
            
            if (testId) {
                loadTestPerformance(testId);
            } else {
                loadAllResults();
            }
        });
        
        // Refresh button
        document.getElementById('refreshBtn').addEventListener('click', function() {
            if (currentTestId) {
                loadTestPerformance(currentTestId);
            } else {
                loadOverallStats();
            }
        });
        
        // Export button
        document.getElementById('exportBtn').addEventListener('click', function() {
            if (currentTestId) {
                exportToCSV();
            } else {
                alert('Please select a test to export');
            }
        });
        
        function loadOverallStats() {
            const analytics = <%- JSON.stringify(analytics) %>;
            
            let totalAttempts = 0;
            let totalScore = 0;
            let activeStudents = new Set();
            
            analytics.forEach(test => {
                totalAttempts += test.total_students || 0;
                if (test.avg_score) {
                    totalScore += test.avg_score;
                }
                // Add unique students
                if (test.total_students > 0) {
                    for (let i = 0; i < test.total_students; i++) {
                        activeStudents.add(`${test.test_id}_${i}`);
                    }
                }
            });
            
            const avgScore = analytics.length > 0 ? (totalScore / analytics.length).toFixed(1) : 0;
            
            document.getElementById('totalAttempts').textContent = totalAttempts;
            document.getElementById('avgScore').textContent = avgScore + '%';
            document.getElementById('activeStudents').textContent = activeStudents.size;
        }
        
        async function loadAllResults() {
            showLoading();
            
            try {
                // Load all results from all tests
                const tests = <%- JSON.stringify(tests) %>;
                let allResults = [];
                
                for (const test of tests) {
                    const response = await fetch(`/teacher-dashboard/performance/test/${test.id}`);
                    const data = await response.json();
                    if (data.success && data.data.length > 0) {
                        allResults = allResults.concat(data.data);
                    }
                }
                
                if (allResults.length === 0) {
                    showNoDataMessage();
                } else {
                    // Sort by score
                    allResults.sort((a, b) => b.score - a.score);
                    displayPerformanceData(allResults);
                }
            } catch (error) {
                console.error('Error loading all results:', error);
                showError('Failed to load performance data');
            }
        }
        
        async function loadTestPerformance(testId) {
            showLoading();
            
            try {
                const response = await fetch(`/teacher-dashboard/performance/test/${testId}`);
                const data = await response.json();
                
                if (data.success) {
                    displayPerformanceData(data.data);
                } else {
                    showError('Failed to load performance data');
                }
            } catch (error) {
                console.error('Error loading performance:', error);
                showError('Failed to load performance data');
            }
        }
        
        function displayPerformanceData(data) {
            const tbody = document.getElementById('performanceTableBody');
            tbody.innerHTML = '';
            
            if (data.length === 0) {
                showNoDataMessage();
                return;
            }
            
            hideMessages();
            
            data.forEach((student, index) => {
                const row = document.createElement('tr');
                row.className = 'border-b border-white/5 hover:bg-white/5 transition-all';
                
                const scoreClass = student.score >= 75 ? 'text-green-400' : student.score >= 50 ? 'text-yellow-400' : 'text-red-400';
                const rankBadge = index < 3 ? `<i class="fas fa-trophy ${index === 0 ? 'text-yellow-400' : index === 1 ? 'text-gray-400' : 'text-orange-400'} mr-2"></i>` : '';
                
                row.innerHTML = `
                    <td class="py-4 px-4 font-bold">${rankBadge}#${index + 1}</td>
                    <td class="py-4 px-4">
                        <div class="font-semibold">${student.student_name}</div>
                        <div class="text-sm text-gray-500">ID: ${student.student_id}</div>
                    </td>
                    <td class="py-4 px-4">
                        <span class="text-2xl font-bold ${scoreClass}">${student.score.toFixed(1)}%</span>
                    </td>
                    <td class="py-4 px-4">
                        <span class="font-semibold">${student.correct_answers}/${student.total_questions}</span>
                    </td>
                    <td class="py-4 px-4">
                        <span class="text-gray-300">${Math.floor(student.time_taken / 60)}m ${student.time_taken % 60}s</span>
                    </td>
                    <td class="py-4 px-4">
                        <span class="text-gray-400">${new Date(student.submitted_at).toLocaleString()}</span>
                    </td>
                `;
                
                tbody.appendChild(row);
            });
        }
        
        function showLoading() {
            document.getElementById('loadingMessage').classList.remove('hidden');
            document.getElementById('performanceTable').classList.add('hidden');
            document.getElementById('noDataMessage').classList.add('hidden');
        }
        
        function hideMessages() {
            document.getElementById('loadingMessage').classList.add('hidden');
            document.getElementById('performanceTable').classList.remove('hidden');
            document.getElementById('noDataMessage').classList.add('hidden');
        }
        
        function showNoDataMessage() {
            document.getElementById('loadingMessage').classList.add('hidden');
            document.getElementById('performanceTable').classList.add('hidden');
            document.getElementById('noDataMessage').classList.remove('hidden');
        }
        
        function showError(message) {
            hideMessages();
            alert(message);
        }
        
        function exportToCSV() {
            const tbody = document.getElementById('performanceTableBody');
            const rows = tbody.querySelectorAll('tr');
            
            if (rows.length === 0) {
                alert('No data to export');
                return;
            }
            
            let csv = 'Rank,Student Name,Student ID,Score,Correct Answers,Total Questions,Time Taken,Submitted At\n';
            
            rows.forEach((row, index) => {
                const cells = row.querySelectorAll('td');
                const name = cells[1].querySelector('.font-semibold').textContent;
                const id = cells[1].querySelector('.text-sm').textContent.replace('ID: ', '');
                const score = cells[2].textContent.trim();
                const answers = cells[3].textContent.trim();
                const time = cells[4].textContent.trim();
                const submitted = cells[5].textContent.trim();
                
                csv += `${index + 1},"${name}",${id},${score},"${answers}","${time}","${submitted}"\n`;
            });
            
            const blob = new Blob([csv], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `performance_${currentTestId}_${Date.now()}.csv`;
            a.click();
        }
    </script>
</body>
</html>
